apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "name" . }}
    chart: {{ template "chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      volumes:
      - name: mastodon-assets
        emptyDir: {}
      - name: mastodon-packs
        emptyDir: {}
      - name: mastodon-system
        emptyDir: {}
      containers:
      - name: {{ template "fullname" . }}-web
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command: [
          "/bin/bash", "-c",
            "rake assets:precompile && \
             rake db:migrate && \
             bundle exec rails s -p 3000 -b 0.0.0.0"
        ]
        ports:
        - name: web
          containerPort: 3000
#        livenessProbe:
#          httpGet:
#            path: /about
#            port: web
#            httpHeaders:
#            - name: X-Forwarded-Proto
#              value: "https"
#          initialDelaySeconds: 60
#          periodSeconds: 3
#        readinessProbe:
#          httpGet:
#            path: /about
#            port: web
#            httpHeaders:
#            - name: X-Forwarded-Proto
#              value: "https"
#          initialDelaySeconds: 3
#          periodSeconds: 3
        resources:
          requests:
            memory: {{ .Values.mastodon.web.memory }}
            cpu: {{ .Values.mastodon.web.cpu }}
        envFrom:
        - configMapRef:
            name: {{ template "fullname" . }}
        - secretRef:
            name: {{ template "fullname" . }}
        env:
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-postgresql"
              key: postgres-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-redis"
              key: redis-password
        volumeMounts:
          - mountPath: /mastodon/public/assets
            name: mastodon-assets
          - mountPath: /mastodon/public/packs
            name: mastodon-packs
          - mountPath: /mastodon/public/system
            name: mastodon-system
      - name: {{ template "fullname" . }}-sidekiq
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command: [
          "bundle", "exec", "sidekiq",
            "-q", "default",
            "-q", "mailers",
            "-q", "pull",
            "-q", "push"
        ]
        resources:
          requests:
            memory: {{ .Values.mastodon.sidekiq.memory }}
            cpu: {{ .Values.mastodon.sidekiq.cpu }}
        envFrom:
        - configMapRef:
            name: {{ template "fullname" . }}
        - secretRef:
            name: {{ template "fullname" . }}
        volumeMounts:
          - mountPath: /mastodon/public/assets
            name: mastodon-assets
          - mountPath: /mastodon/public/packs
            name: mastodon-packs
          - mountPath: /mastodon/public/system
            name: mastodon-system
      - name: {{ template "fullname" . }}-streaming
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command: [ "yarn", "start" ]
        ports:
        - name: streaming
          containerPort: 4000
        resources:
          requests:
            memory: {{ .Values.mastodon.streaming.memory }}
            cpu: {{ .Values.mastodon.streaming.cpu }}
        envFrom:
        - configMapRef:
            name: {{ template "fullname" . }}
        - secretRef:
            name: {{ template "fullname" . }}
      - name: {{ template "fullname" . }}-smtpd
        image: "{{ .Values.smtpd.container }}"
        resources:
          requests:
            memory: {{ .Values.smtpd.memory }}
            cpu: {{ .Values.smtpd.cpu }}
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
